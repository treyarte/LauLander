%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 6cf51161046453c40b9eaf63bfb19050, type: 3}
  m_Name: Quiz_L1270_03
  m_EditorClassIdentifier: 
  question: "Why is it okay to make fields in ScriptableObjects `public` in this
    lecture\u2019s implementation?"
  optionList:
  - Because Unity forces it for serialization
  - Because the fields are meant to be modified at runtime
  - Because the ScriptableObjects are used as read-only data containers
  - Because public fields are faster than private ones
  correctOptionIndex: 2
  answer: ScriptableObjects in this system are treated as read-only containers. They
    are never modified at runtime, making it safe to expose their fields as public
    for convenience. But this is just a personal rule, Unity does not enforce this
    rule, so if you don't trust yourself to follow this rule then keep making them
    private with an exposed get() function.

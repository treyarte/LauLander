%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3f6a93b863ca8314695b382c0c8c2b3d, type: 3}
  m_Name: L1110_LandingDetection
  m_EditorClassIdentifier: 
  lectureCode: 1110
  lectureSectionNumber: 11
  lectureName: LandingDetection
  lectureTitle: Landing Detection
  frequentlyAskedQuestionListSO: {fileID: 11400000, guid: b20eec15e1c304d47ac515a1f852c7ee,
    type: 2}
  quizListSO: {fileID: 11400000, guid: 2c81c66e0cfbba54a895a6be5a7c7d87, type: 2}
  exerciseListSO: {fileID: 0}
  lectureDescription: "<h1>Lecture Summary: Landing Detection</h1>\r\n\r\nIn this
    lecture, we learned how to detect if the player landed the ship safely or crashed
    into the terrain. First, we tapped into Unity\u2019s built-in `OnCollisionEnter2D()`
    function to detect when the lander touches something. Then we used the `relativeVelocity.magnitude`
    from the collision data to determine how fast the lander was going. If it's above
    a max landing speed (we used 4f), then it\u2019s too fast, a crash!\r\n\r\nNext,
    we checked the angle using a bit of vector math with `Vector2.Dot()`. This tells
    us how aligned the lander's up direction is with the world\u2019s up. If it\u2019s
    off by too much, meaning it\u2019s tilted too far, it\u2019s also a crash. Only
    if the lander is slow *and* upright do we consider it a successful landing.\r\n\r\nWe
    made sure to avoid magic numbers by using clearly named variables for readability
    and clean code. Now we\u2019ve got some solid collision logic to determine soft
    vs hard landings.\r\n\r\nIn the next lecture, we\u2019ll tighten this up by making
    sure landings only count on designated landing pads and then calculate a proper
    score based on how good the landing was.\r\n"

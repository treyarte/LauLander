%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3f6a93b863ca8314695b382c0c8c2b3d, type: 3}
  m_Name: L1180_LandedUI
  m_EditorClassIdentifier: 
  lectureCode: 1180
  lectureSectionNumber: 18
  lectureName: LandedUI
  lectureTitle: Landed UI
  frequentlyAskedQuestionListSO: {fileID: 11400000, guid: eefb1c58441efe64f9f6617720571431,
    type: 2}
  quizListSO: {fileID: 11400000, guid: ade4cfb7ae3ccf64584db094a116b2e0, type: 2}
  exerciseListSO: {fileID: 0}
  lectureDescription: "<h1>Lecture Summary: LandedUI, Pause, Restart</h1>\r\n\r\nIn
    this lecture, we built a clean UI window to show our landing results, whether
    we landed safely or crashed. We displayed important stats like landing speed,
    angle, score multiplier, and final score. Just like before, everything is nicely
    decoupled using C# events.\r\n\r\nWe created a new `LandedUI` panel, stretched
    it to fill the screen, and added a banner, title, and stats text. Then, we added
    a script to handle showing/hiding this panel and listening to the `OnLanded`
    event from the lander. We used a custom `EventArgs` class to pass extra data
    like landing type and score values.\r\n\r\nThe title updates based on whether
    the landing was successful or not, and we used simple math to round and format
    the stats for display. To manage visibility, we set the UI to hide on `Start`
    (not `Awake`, important for event listeners to work correctly), then show it
    when the event fires.\r\n\r\nEverything works great! The UI pops up after each
    landing or crash with all the info. Next up, we\u2019ll pause the game after
    landing and add the ability to restart from this screen. Let\u2019s do that in
    the next lecture!\r\n"
